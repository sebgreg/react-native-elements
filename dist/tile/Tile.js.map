{"version":3,"sources":["../../src/tile/Tile.js"],"names":["Tile","featured","props","imageSrc","icon","title","children","caption","titleStyle","onPress","activeOpacity","overlayContainerStyle","captionStyle","iconContainerStyle","imageContainerStyle","containerStyle","contentContainerStyle","titleNumberOfLines","attributes","width","height","get","styles","create","container","imageContainer","alignItems","justifyContent","backgroundColor","flex","text","marginBottom","contentContainer","paddingTop","paddingBottom","paddingLeft","paddingRight","iconContainer","alignSelf","featuredProps","propTypes","string","object","source","func","number","style","bool","any"],"mappings":"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","file":"Tile.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  View,\n  Text as NativeText,\n  StyleSheet,\n  Dimensions,\n  TouchableOpacity,\n} from 'react-native';\nimport Text from '../text/Text';\nimport Icon from '../icons/Icon';\nimport FeaturedTile from './FeaturedTile';\nimport ViewPropTypes from '../config/ViewPropTypes';\nimport ImagePropTypes from '../config/ImagePropTypes';\nimport BackgroundImage from '../config/BackgroundImage';\n\nconst Tile = props => {\n  const {\n    featured,\n    imageSrc,\n    icon,\n    title,\n    children,\n    caption,\n    titleStyle,\n    onPress,\n    activeOpacity,\n    overlayContainerStyle,\n    captionStyle,\n    iconContainerStyle,\n    imageContainerStyle,\n    containerStyle,\n    contentContainerStyle,\n    titleNumberOfLines,\n    ...attributes\n  } = props;\n\n  let { width, height } = props;\n\n  if (!width) {\n    width = Dimensions.get('window').width;\n  }\n\n  if (!height) {\n    height = width * 0.8;\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      width,\n      height,\n    },\n    imageContainer: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#ffffff',\n      flex: 2,\n    },\n    text: {\n      backgroundColor: 'rgba(0,0,0,0)',\n      marginBottom: 5,\n    },\n    contentContainer: {\n      paddingTop: 15,\n      paddingBottom: 5,\n      paddingLeft: 15,\n      paddingRight: 15,\n    },\n    iconContainer: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      alignSelf: 'center',\n    },\n  });\n\n  if (featured) {\n    const featuredProps = {\n      title,\n      icon,\n      caption,\n      imageSrc,\n      onPress,\n      activeOpacity,\n      containerStyle,\n      imageContainerStyle,\n      overlayContainerStyle,\n      titleStyle,\n      captionStyle,\n      width,\n      height,\n    };\n    return <FeaturedTile {...featuredProps} />;\n  }\n\n  return (\n    <TouchableOpacity\n      {...attributes}\n      onPress={onPress}\n      activeOpacity={activeOpacity}\n      style={[styles.container, containerStyle && containerStyle]}\n    >\n      <BackgroundImage\n        source={imageSrc}\n        style={[\n          styles.imageContainer,\n          imageContainerStyle && imageContainerStyle,\n        ]}\n        resizeMode=\"cover\"\n      >\n        <View\n          style={[\n            styles.iconContainer,\n            iconContainerStyle && iconContainerStyle,\n          ]}\n        >\n          {icon && <Icon {...icon} />}\n        </View>\n      </BackgroundImage>\n      <View\n        style={[\n          styles.contentContainer,\n          contentContainerStyle && contentContainerStyle,\n        ]}\n      >\n        <Text\n          h4\n          style={[styles.text, titleStyle && titleStyle]}\n          numberOfLines={titleNumberOfLines}\n        >\n          {title}\n        </Text>\n        {children}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nTile.propTypes = {\n  title: PropTypes.string,\n  icon: PropTypes.object,\n  caption: PropTypes.string,\n  imageSrc: ImagePropTypes.source,\n  onPress: PropTypes.func,\n  activeOpacity: PropTypes.number,\n  containerStyle: ViewPropTypes.style,\n  imageContainerStyle: ViewPropTypes.style,\n  iconContainerStyle: ViewPropTypes.style,\n  overlayContainerStyle: ViewPropTypes.style,\n  titleStyle: NativeText.propTypes.style,\n  captionStyle: NativeText.propTypes.style,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  featured: PropTypes.bool,\n  children: PropTypes.any,\n  contentContainerStyle: ViewPropTypes.style,\n  titleNumberOfLines: PropTypes.number,\n};\n\nexport default Tile;\n"]}