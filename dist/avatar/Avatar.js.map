{"version":3,"sources":["../../src/avatar/Avatar.js"],"names":["DEFAULT_COLORS","Avatar","component","props","onPress","onLongPress","containerStyle","icon","iconStyle","source","small","medium","large","xlarge","avatarStyle","rounded","title","titleStyle","overlayContainerStyle","activeOpacity","showEditButton","editButton","onEditPress","attributes","width","height","titleSize","iconSize","touchableProps","Component","renderUtils","editButtonProps","defaultEditButtonSize","editButtonSize","size","editButtonSizeStyle","borderRadius","editButtonIconSize","styles","style","underlayColor","iconName","iconType","iconColor","renderContent","avatar","color","name","type","create","container","backgroundColor","overlayContainer","flex","alignItems","alignSelf","justifyContent","position","top","left","right","bottom","fontSize","textAlign","select","ios","shadowColor","shadowOffset","shadowRadius","shadowOpacity","android","one","web","defaultProps","propTypes","func","number","any","bool","string","object","shape"],"mappings":"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","file":"Avatar.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  Platform,\n  StyleSheet,\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport elevation from '../config/elevation';\nimport ViewPropTypes from '../config/ViewPropTypes';\nimport ImagePropTypes from '../config/ImagePropTypes';\n\nimport Icon from '../icons/Icon';\n\nconst DEFAULT_COLORS = ['#000', '#333', '#555', '#888', '#aaa', '#ddd'];\n\nconst Avatar = props => {\n  const {\n    component,\n    onPress,\n    onLongPress,\n    containerStyle,\n    icon,\n    iconStyle,\n    source,\n    small,\n    medium,\n    large,\n    xlarge,\n    avatarStyle,\n    rounded,\n    title,\n    titleStyle,\n    overlayContainerStyle,\n    activeOpacity,\n    showEditButton,\n    editButton,\n    onEditPress,\n    ...attributes\n  } = props;\n\n  let { width, height } = props;\n\n  if (small) {\n    width = 34;\n    height = 34;\n  } else if (medium) {\n    width = 50;\n    height = 50;\n  } else if (large) {\n    width = 75;\n    height = 75;\n  } else if (xlarge) {\n    width = 150;\n    height = 150;\n  } else if (!width && !height) {\n    width = 34;\n    height = 34;\n  } else if (!width) {\n    width = height;\n  } else if (!height) {\n    height = width;\n  }\n\n  let titleSize = width / 2;\n  let iconSize = width / 2;\n\n  let touchableProps = {};\n  let Component = View;\n  if (onPress || onLongPress) {\n    Component = TouchableOpacity;\n    touchableProps = { onPress, onLongPress, activeOpacity };\n  }\n  if (component) {\n    Component = component;\n    if (Component != TouchableOpacity) delete touchableProps.activeOpacity;\n  }\n\n  const renderUtils = () => {\n    if (showEditButton) {\n      const editButtonProps = { ...editButton };\n\n      const defaultEditButtonSize = (width + height) / 2 / 3;\n      const editButtonSize = editButton.size || defaultEditButtonSize;\n      const editButtonSizeStyle = {\n        width: editButtonSize,\n        height: editButtonSize,\n        borderRadius: editButtonSize / 2,\n      };\n      const editButtonIconSize = editButtonSize * 0.8;\n\n      return (\n        <TouchableHighlight\n          style={[\n            styles.editButton,\n            editButtonSizeStyle,\n            editButtonProps.style,\n          ]}\n          underlayColor={editButtonProps.underlayColor}\n          onPress={onEditPress}\n        >\n          <View>\n            <Icon\n              size={editButtonIconSize}\n              name={editButtonProps.iconName}\n              type={editButtonProps.iconType}\n              color={editButtonProps.iconColor}\n            />\n          </View>\n        </TouchableHighlight>\n      );\n    }\n  };\n\n  const renderContent = () => {\n    if (source) {\n      return (\n        <Image\n          style={[\n            styles.avatar,\n            rounded && { borderRadius: width / 2 },\n            avatarStyle && avatarStyle,\n          ]}\n          source={source}\n          draggable={false}\n        />\n      );\n    } else if (title) {\n      return (\n        <Text style={[styles.title, titleStyle && titleStyle]}>{title}</Text>\n      );\n    } else if (icon) {\n      return (\n        <Icon\n          iconStyle={iconStyle && iconStyle}\n          color={icon.color || 'white'}\n          name={icon.name || 'user'}\n          size={icon.size || iconSize}\n          type={icon.type && icon.type}\n        />\n      );\n    }\n  };\n\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: 'transparent',\n      width: width,\n      height: height,\n    },\n    avatar: {\n      width: width,\n      height: height,\n    },\n    overlayContainer: {\n      flex: 1,\n      alignItems: 'center',\n      backgroundColor: 'rgba(0,0,0,0.2)',\n      alignSelf: 'stretch',\n      justifyContent: 'center',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n    },\n    title: {\n      color: '#ffffff',\n      fontSize: titleSize,\n      backgroundColor: 'rgba(0,0,0,0)',\n      textAlign: 'center',\n    },\n    editButton: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: DEFAULT_COLORS[4],\n      ...Platform.select({\n        ios: {\n          shadowColor: DEFAULT_COLORS[0],\n          shadowOffset: { width: 1, height: 1 },\n          shadowRadius: 2,\n          shadowOpacity: 0.5,\n        },\n        android: elevation.android.one,\n        web: elevation.web.one,\n      }),\n    },\n  });\n\n  return (\n    <Component\n      {...touchableProps}\n      style={[\n        styles.container,\n        rounded && { borderRadius: width / 2 },\n        containerStyle && containerStyle,\n      ]}\n      {...attributes}\n    >\n      <View\n        style={[\n          styles.overlayContainer,\n          rounded && { borderRadius: width / 2 },\n          overlayContainerStyle && overlayContainerStyle,\n        ]}\n      >\n        {renderContent()}\n        {renderUtils()}\n      </View>\n    </Component>\n  );\n};\n\nconst defaultProps = {\n  showEditButton: false,\n  onEditPress: null,\n  editButton: {\n    size: null,\n    iconName: 'mode-edit',\n    iconType: 'material',\n    iconColor: '#fff',\n    underlayColor: DEFAULT_COLORS[0],\n    style: null,\n  },\n};\n\nAvatar.propTypes = {\n  component: PropTypes.func,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  containerStyle: PropTypes.any,\n  source: ImagePropTypes.source,\n  avatarStyle: PropTypes.any,\n  rounded: PropTypes.bool,\n  title: PropTypes.string,\n  titleStyle: Text.propTypes.style,\n  overlayContainerStyle: PropTypes.any,\n  activeOpacity: PropTypes.number,\n  icon: PropTypes.object,\n  iconStyle: Text.propTypes.style,\n  small: PropTypes.bool,\n  medium: PropTypes.bool,\n  large: PropTypes.bool,\n  xlarge: PropTypes.bool,\n  showEditButton: PropTypes.bool,\n  onEditPress: PropTypes.func,\n  editButton: PropTypes.shape({\n    size: PropTypes.number,\n    iconName: PropTypes.string,\n    iconType: PropTypes.string,\n    iconColor: PropTypes.string,\n    underlayColor: PropTypes.string,\n    style: ViewPropTypes.style,\n  }),\n};\n\nAvatar.defaultProps = defaultProps;\n\nexport default Avatar;\n"]}